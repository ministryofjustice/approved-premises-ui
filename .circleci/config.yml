version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@8.2.0
  slack: circleci/slack@4.12.5
  node: circleci/node@5.2.0

parameters:
  alerts-slack-channel:
    type: string
    default: cas-events
  releases-slack-channel:
    type: string
    default: cas-events

  node-version:
    type: string
    default: 20.9-browsers

executors:
  integration-tests:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
      - image: cimg/redis:7.0
        command: redis-server --port 6380
    resource_class: medium+
    working_directory: ~/app

jobs:
  build:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@10.1.0'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --no-audit
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run:
          command: |
            npm run build
      - run:
          # Run linter after build because the integration test code depend on compiled typescript...
          name: Linter check
          command: npm run lint
      - run:
          name: Type check
          command: npm run typecheck
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build
            - dist
            - .cache/Cypress

  unit_test:
    parallelism: 4
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Run unit tests
          command: |
            TESTS=$(circleci tests glob "server/**/*.test.ts" | circleci tests split --split-by=timings)
            npm run test:ci $TESTS
      - run:
          name: collect coverage data
          command: |
            mv ./coverage/coverage-final.json ./coverage/coverage_${CIRCLE_NODE_INDEX}.json
      - store_test_results:
          path: test_results/jest
      - store_artifacts:
          path: test_results/unit-test-reports.html
      - persist_to_workspace:
          root: .
          paths:
            - coverage

  coverage:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Merge coverage reports
          command: npx nyc merge ./coverage/ ./coverage/.nyc_output
      - run:
          name: Check Coverage
          command: |
            npx nyc report -t ./coverage --reporter=text --reporter=text-summary
            npx nyc check-coverage -t ./coverage

  integration_test:
    parallelism: 4
    executor:
      name: integration-tests
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Install missing OS dependency
          command: sudo apt-get install libxss1
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Get wiremock
          command: curl -o wiremock.jar
            https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.1/wiremock-standalone-2.27.1.jar
      - run:
          name: Run wiremock
          command: java -jar wiremock.jar --port 9999
          background: true
      - run:
          name: Run the node app.
          command: npm run compile-sass && npm run start-feature
          background: true
      - run:
          name: Wait for node app to start
          command: |
            until curl http://localhost:3007/health > /dev/null 2>&1; do
              printf '.'
              sleep 1
            done
      - run:
          name: integration tests
          command: |
            TESTS=$(circleci tests glob "integration_tests/tests/**/*.cy.ts" | circleci tests split --split-by=timings | paste -sd ',')
            npm run int-test -- --spec $TESTS
      - store_test_results:
          path: test_results/cypress
      - store_artifacts:
          path: integration_tests/videos
      - store_artifacts:
          path: integration_tests/screenshots

  e2e_environment_test_on_merge:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    parallelism: 4
    circleci_ip_ranges: true # opt-in to jobs running on a restricted set of IPs
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Playwright
          command: npx playwright install
      - run:
          name: E2E Check
          command: |
            SHARD="$((${CIRCLE_NODE_INDEX}+1))"
            username="HMPPS_AUTH_USERNAME_$SHARD"
            password="HMPPS_AUTH_PASSWORD_$SHARD"
            email="HMPPS_AUTH_EMAIL_$SHARD"
            name="HMPPS_AUTH_NAME_$SHARD"
            HMPPS_AUTH_USERNAME="${!username}"
            HMPPS_AUTH_PASSWORD="${!password}"
            HMPPS_AUTH_EMAIL="${!email}"
            HMPPS_AUTH_NAME="${!name}"
            npm run test:e2e:ci -- --shard=${SHARD}/${CIRCLE_NODE_TOTAL}
      - store_artifacts:
          path: playwright-report
          destination: playwright-report
      - store_artifacts:
          path: test-results
          destination: test-results
      - slack/notify:
          event: fail
          channel: << pipeline.parameters.alerts-slack-channel >>
          template: basic_fail_1
workflows:
  build-test-and-deploy:
    jobs:
      - build
      - unit_test:
          requires:
            - build
      - integration_test:
          requires:
            - build
      - coverage:
          requires:
            - unit_test
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: 'dev'
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - helm_lint
            - build_docker
      - e2e_environment_test_on_merge:
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - build
            - deploy_dev
      - request-preprod-approval:
          type: approval
          filters:
            branches:
              only:
                - main
          requires:
            - e2e_environment_test_on_merge
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: 'preprod'
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context:
            - hmpps-common-vars
            - hmpps-approved-premises-ui-preprod
          requires:
            - request-preprod-approval
      - request-test-approval:
          type: approval
          filters:
            branches:
              only:
                - feature/APS-1298-update-space-search-for-user-research
          requires:
            - helm_lint
            - build_docker
      - hmpps/deploy_env:
          name: deploy_test
          env: 'test'
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context:
            - hmpps-common-vars
            - hmpps-approved-premises-ui-stage
          requires:
            - helm_lint
            - build_docker
            - request-test-approval

      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: 'prod'
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          slack_notification: true
          slack_channel_name: << pipeline.parameters.releases-slack-channel >>
          context:
            - hmpps-common-vars
            - hmpps-approved-premises-ui-prod
          requires:
            - request-prod-approval

  security:
    triggers:
      - schedule:
          cron: '1 7 * * 1-5'
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/npm_security_audit:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
  security-weekly:
    triggers:
      - schedule:
          cron: '20 7 * * 1'
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
